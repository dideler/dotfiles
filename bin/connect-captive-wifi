#!/bin/bash -eu

SCRIPT_NAME=$(basename "$0")

show_help() {
  echo "Usage: $SCRIPT_NAME [-h|--help]"
  echo
  echo "Temporarily resets Wi-Fi and DNS settings to trigger captive portals on public Wi-Fi networks."
  echo "Restores original settings after the portal is handled or on interruption."
  exit 0
}

[[ "${1:-}" =~ ^-h|--help$ ]] && show_help

WIFI_SERVICE=$(networksetup -listallnetworkservices | grep -i "Wi-Fi") || {
  echo "Wi-Fi service not found. Exiting."
  exit 1
}

CURRENT_DNS=""
WARP_PRESENT=false

get_current_dns() {
  CURRENT_DNS=$(networksetup -getdnsservers "$WIFI_SERVICE")
  if [[ "$CURRENT_DNS" == "There aren't any DNS Servers set on $WIFI_SERVICE." ]]; then
    CURRENT_DNS=""
  fi
}

set_temp_dns() {
  echo "No custom DNS servers set. Setting Cloudflare and Google DNS."
  networksetup -setdnsservers "$WIFI_SERVICE" 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4
  CURRENT_DNS=$(networksetup -getdnsservers "$WIFI_SERVICE")
  echo -e "Current DNS entries:\n$CURRENT_DNS"
}

clear_dns() {
  echo -e "Removing DNS entries:\n$CURRENT_DNS\n"
  networksetup -setdnsservers "$WIFI_SERVICE" Empty
}

disable_warp() {
  if command -v warp-cli &> /dev/null; then
    WARP_PRESENT=true
    echo -e "Disabling Cloudflare WARP...\n"
    warp-cli disconnect > /dev/null 2>&1
  fi
}

enable_warp() {
  if $WARP_PRESENT; then
    echo -e "Re-enabling Cloudflare WARP...\n"
    warp-cli connect > /dev/null 2>&1
  fi
}

wifi_power_cycle() {
  echo -e "Turning off Wi-Fi power...\n"
  networksetup -setairportpower en0 off
  echo -e "Sleeping for 10 seconds...\n"
  sleep 10
  echo -e "Restoring Wi-Fi power...\n"
  networksetup -setairportpower en0 on
}

wait_for_connection() {
  echo -n "Connecting to a Wi-Fi network."
  while true; do
    networksetup -getairportnetwork "en0" | grep "Current Wi-Fi Network" && echo && break
    echo -n "."
    sleep 1.5
  done
}

check_captive_portal() {
  if curl --max-time 5 --silent https://captive.apple.com | grep --silent "Success"; then
    echo "Success"
  else
    echo -e "Paused to handle Wi-Fi's captive portal. Hit any key to continue or ESC to exit...\n"
    read -s -n 1 reply
    [[ "$reply" == $'\e' ]] && echo "Goodbye!" && exit
  fi
}

restore_dns() {
  echo -e "Restoring DNS entries:\n$CURRENT_DNS\n"
  if [ -n "$CURRENT_DNS" ]; then
    networksetup -setdnsservers "$WIFI_SERVICE" $CURRENT_DNS
  else
    networksetup -setdnsservers "$WIFI_SERVICE" Empty
  fi
}

cleanup() {
  echo -e "\n\nInterrupted. Restoring original settings..."
  restore_dns
  enable_warp
  exit 1
}

trap cleanup INT TERM

get_current_dns
if [ -z "$CURRENT_DNS" ]; then
  set_temp_dns
  exit 0
fi
clear_dns
disable_warp
wifi_power_cycle
wait_for_connection
check_captive_portal
restore_dns
enable_warp

echo "Done!"
